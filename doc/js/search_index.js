var search_data = {"index":{"searchIndex":["sidekiq","deadset","jobrecord","jobset","process","processset","queue","retryset","scheduledset","sortedentry","sortedset","stats","history","queues","workset","workers","[]()","[]()","add_to_queue()","all()","args()","at()","cleanup()","clear()","clear()","created_at()","dead_size()","default_queue_latency()","delete()","delete()","delete()","delete_by_jid()","delete_by_value()","display_args()","display_class()","dump_threads()","each()","each()","each()","each()","each()","enqueued()","enqueued_at()","error?()","error_backtrace()","failed()","failed()","fetch()","fetch_stats!()","fetch_stats_fast!()","fetch_stats_slow!()","find_job()","find_job()","identity()","jid()","kill()","kill()","kill_all()","klass()","labels()","latency()","latency()","leader()","lengths()","max_jobs()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","parse()","paused?()","processed()","processed()","processes_size()","queues()","queues()","quiet!()","reschedule()","reset()","retry()","retry_all()","retry_all()","retry_size()","scan()","schedule()","scheduled_size()","size()","size()","size()","size()","size()","stop!()","stopping?()","tag()","tags()","timeout()","total_concurrency()","total_rss()","total_rss_in_kb()","workers_size()","💣()","💣()"],"longSearchIndex":["sidekiq","sidekiq::deadset","sidekiq::jobrecord","sidekiq::jobset","sidekiq::process","sidekiq::processset","sidekiq::queue","sidekiq::retryset","sidekiq::scheduledset","sidekiq::sortedentry","sidekiq::sortedset","sidekiq::stats","sidekiq::stats::history","sidekiq::stats::queues","sidekiq::workset","sidekiq::workers","sidekiq::jobrecord#[]()","sidekiq::process#[]()","sidekiq::sortedentry#add_to_queue()","sidekiq::queue::all()","sidekiq::jobrecord#args()","sidekiq::sortedentry#at()","sidekiq::processset#cleanup()","sidekiq::queue#clear()","sidekiq::sortedset#clear()","sidekiq::jobrecord#created_at()","sidekiq::stats#dead_size()","sidekiq::stats#default_queue_latency()","sidekiq::jobrecord#delete()","sidekiq::jobset#delete()","sidekiq::sortedentry#delete()","sidekiq::jobset#delete_by_jid()","sidekiq::jobset#delete_by_value()","sidekiq::jobrecord#display_args()","sidekiq::jobrecord#display_class()","sidekiq::process#dump_threads()","sidekiq::jobset#each()","sidekiq::processset#each()","sidekiq::queue#each()","sidekiq::workset#each()","sidekiq::workset#each()","sidekiq::stats#enqueued()","sidekiq::jobrecord#enqueued_at()","sidekiq::sortedentry#error?()","sidekiq::jobrecord#error_backtrace()","sidekiq::stats#failed()","sidekiq::stats::history#failed()","sidekiq::jobset#fetch()","sidekiq::stats#fetch_stats!()","sidekiq::stats#fetch_stats_fast!()","sidekiq::stats#fetch_stats_slow!()","sidekiq::jobset#find_job()","sidekiq::queue#find_job()","sidekiq::process#identity()","sidekiq::jobrecord#jid()","sidekiq::deadset#kill()","sidekiq::sortedentry#kill()","sidekiq::retryset#kill_all()","sidekiq::jobrecord#klass()","sidekiq::process#labels()","sidekiq::jobrecord#latency()","sidekiq::queue#latency()","sidekiq::processset#leader()","sidekiq::stats::queues#lengths()","sidekiq::deadset::max_jobs()","sidekiq::deadset::new()","sidekiq::jobrecord::new()","sidekiq::process::new()","sidekiq::processset::new()","sidekiq::queue::new()","sidekiq::retryset::new()","sidekiq::scheduledset::new()","sidekiq::sortedentry::new()","sidekiq::sortedset::new()","sidekiq::stats::new()","sidekiq::stats::history::new()","sidekiq::jobrecord#parse()","sidekiq::queue#paused?()","sidekiq::stats#processed()","sidekiq::stats::history#processed()","sidekiq::stats#processes_size()","sidekiq::process#queues()","sidekiq::stats#queues()","sidekiq::process#quiet!()","sidekiq::sortedentry#reschedule()","sidekiq::stats#reset()","sidekiq::sortedentry#retry()","sidekiq::deadset#retry_all()","sidekiq::retryset#retry_all()","sidekiq::stats#retry_size()","sidekiq::sortedset#scan()","sidekiq::jobset#schedule()","sidekiq::stats#scheduled_size()","sidekiq::processset#size()","sidekiq::queue#size()","sidekiq::sortedset#size()","sidekiq::workset#size()","sidekiq::workset#size()","sidekiq::process#stop!()","sidekiq::process#stopping?()","sidekiq::process#tag()","sidekiq::jobrecord#tags()","sidekiq::deadset::timeout()","sidekiq::processset#total_concurrency()","sidekiq::processset#total_rss()","sidekiq::processset#total_rss_in_kb()","sidekiq::stats#workers_size()","sidekiq::queue#💣()","sidekiq::sortedset#💣()"],"info":[["Sidekiq","","Sidekiq.html","",""],["Sidekiq::DeadSet","","Sidekiq/DeadSet.html","","<p>Allows enumeration of dead jobs within Sidekiq.\n"],["Sidekiq::JobRecord","","Sidekiq/JobRecord.html","","<p>Encapsulates a pending job within a Sidekiq queue or sorted set.\n<p>The job should be considered immutable …\n"],["Sidekiq::JobSet","","Sidekiq/JobSet.html","",""],["Sidekiq::Process","","Sidekiq/Process.html","","<p>Sidekiq::Process represents an active Sidekiq process talking with Redis.\nEach process has a set of attributes …\n"],["Sidekiq::ProcessSet","","Sidekiq/ProcessSet.html","","<p>Enumerates the set of Sidekiq processes which are actively working right\nnow.  Each process sends a heartbeat …\n"],["Sidekiq::Queue","","Sidekiq/Queue.html","","<p>Encapsulates a queue within Sidekiq. Allows enumeration of all jobs within\nthe queue and deletion of …\n"],["Sidekiq::RetrySet","","Sidekiq/RetrySet.html","","<p>Allows enumeration of retries within Sidekiq. Based on this, you can\nsearch/filter for jobs.  Here&#39;s …\n"],["Sidekiq::ScheduledSet","","Sidekiq/ScheduledSet.html","","<p>Allows enumeration of scheduled jobs within Sidekiq. Based on this, you can\nsearch/filter for jobs.  …\n"],["Sidekiq::SortedEntry","","Sidekiq/SortedEntry.html","",""],["Sidekiq::SortedSet","","Sidekiq/SortedSet.html","",""],["Sidekiq::Stats","","Sidekiq/Stats.html","",""],["Sidekiq::Stats::History","","Sidekiq/Stats/History.html","",""],["Sidekiq::Stats::Queues","","Sidekiq/Stats/Queues.html","",""],["Sidekiq::WorkSet","","Sidekiq/WorkSet.html","","<p>The WorkSet stores the work being done by this Sidekiq cluster. It tracks\nthe process and thread working …\n"],["Sidekiq::Workers","","Sidekiq/WorkSet.html","","<p>The WorkSet stores the work being done by this Sidekiq cluster. It tracks\nthe process and thread working …\n"],["[]","Sidekiq::JobRecord","Sidekiq/JobRecord.html#method-i-5B-5D","(name)",""],["[]","Sidekiq::Process","Sidekiq/Process.html#method-i-5B-5D","(key)",""],["add_to_queue","Sidekiq::SortedEntry","Sidekiq/SortedEntry.html#method-i-add_to_queue","()",""],["all","Sidekiq::Queue","Sidekiq/Queue.html#method-c-all","()","<p>Return all known queues within Redis.\n"],["args","Sidekiq::JobRecord","Sidekiq/JobRecord.html#method-i-args","()",""],["at","Sidekiq::SortedEntry","Sidekiq/SortedEntry.html#method-i-at","()",""],["cleanup","Sidekiq::ProcessSet","Sidekiq/ProcessSet.html#method-i-cleanup","()","<p>Cleans up dead processes recorded in Redis. Returns the number of processes\ncleaned.\n"],["clear","Sidekiq::Queue","Sidekiq/Queue.html#method-i-clear","()",""],["clear","Sidekiq::SortedSet","Sidekiq/SortedSet.html#method-i-clear","()",""],["created_at","Sidekiq::JobRecord","Sidekiq/JobRecord.html#method-i-created_at","()",""],["dead_size","Sidekiq::Stats","Sidekiq/Stats.html#method-i-dead_size","()",""],["default_queue_latency","Sidekiq::Stats","Sidekiq/Stats.html#method-i-default_queue_latency","()",""],["delete","Sidekiq::JobRecord","Sidekiq/JobRecord.html#method-i-delete","()","<p>Remove this job from the queue.\n"],["delete","Sidekiq::JobSet","Sidekiq/JobSet.html#method-i-delete","(score, jid)",""],["delete","Sidekiq::SortedEntry","Sidekiq/SortedEntry.html#method-i-delete","()",""],["delete_by_jid","Sidekiq::JobSet","Sidekiq/JobSet.html#method-i-delete_by_jid","(score, jid)",""],["delete_by_value","Sidekiq::JobSet","Sidekiq/JobSet.html#method-i-delete_by_value","(name, value)",""],["display_args","Sidekiq::JobRecord","Sidekiq/JobRecord.html#method-i-display_args","()",""],["display_class","Sidekiq::JobRecord","Sidekiq/JobRecord.html#method-i-display_class","()",""],["dump_threads","Sidekiq::Process","Sidekiq/Process.html#method-i-dump_threads","()",""],["each","Sidekiq::JobSet","Sidekiq/JobSet.html#method-i-each","()",""],["each","Sidekiq::ProcessSet","Sidekiq/ProcessSet.html#method-i-each","()",""],["each","Sidekiq::Queue","Sidekiq/Queue.html#method-i-each","()",""],["each","Sidekiq::WorkSet","Sidekiq/WorkSet.html#method-i-each","(&block)",""],["each","Sidekiq::WorkSet","Sidekiq/WorkSet.html#method-i-each","(&block)",""],["enqueued","Sidekiq::Stats","Sidekiq/Stats.html#method-i-enqueued","()",""],["enqueued_at","Sidekiq::JobRecord","Sidekiq/JobRecord.html#method-i-enqueued_at","()",""],["error?","Sidekiq::SortedEntry","Sidekiq/SortedEntry.html#method-i-error-3F","()",""],["error_backtrace","Sidekiq::JobRecord","Sidekiq/JobRecord.html#method-i-error_backtrace","()",""],["failed","Sidekiq::Stats","Sidekiq/Stats.html#method-i-failed","()",""],["failed","Sidekiq::Stats::History","Sidekiq/Stats/History.html#method-i-failed","()",""],["fetch","Sidekiq::JobSet","Sidekiq/JobSet.html#method-i-fetch","(score, jid = nil)","<p>Fetch jobs that match a given time or Range. Job ID is an optional second\nargument.\n"],["fetch_stats!","Sidekiq::Stats","Sidekiq/Stats.html#method-i-fetch_stats-21","()",""],["fetch_stats_fast!","Sidekiq::Stats","Sidekiq/Stats.html#method-i-fetch_stats_fast-21","()","<p>O(1) redis calls\n"],["fetch_stats_slow!","Sidekiq::Stats","Sidekiq/Stats.html#method-i-fetch_stats_slow-21","()","<p>O(number of processes + number of queues) redis calls\n"],["find_job","Sidekiq::JobSet","Sidekiq/JobSet.html#method-i-find_job","(jid)","<p>Find the job with the given JID within this sorted set. This is a slower\nO(n) operation.  Do not use …\n"],["find_job","Sidekiq::Queue","Sidekiq/Queue.html#method-i-find_job","(jid)","<p>Find the job with the given JID within this queue.\n<p>This is a slow, inefficient operation.  Do not use …\n"],["identity","Sidekiq::Process","Sidekiq/Process.html#method-i-identity","()",""],["jid","Sidekiq::JobRecord","Sidekiq/JobRecord.html#method-i-jid","()",""],["kill","Sidekiq::DeadSet","Sidekiq/DeadSet.html#method-i-kill","(message, opts = {})",""],["kill","Sidekiq::SortedEntry","Sidekiq/SortedEntry.html#method-i-kill","()","<p>Place job in the dead set\n"],["kill_all","Sidekiq::RetrySet","Sidekiq/RetrySet.html#method-i-kill_all","()",""],["klass","Sidekiq::JobRecord","Sidekiq/JobRecord.html#method-i-klass","()",""],["labels","Sidekiq::Process","Sidekiq/Process.html#method-i-labels","()",""],["latency","Sidekiq::JobRecord","Sidekiq/JobRecord.html#method-i-latency","()",""],["latency","Sidekiq::Queue","Sidekiq/Queue.html#method-i-latency","()","<p>Calculates this queue&#39;s latency, the difference in seconds since the\noldest job in the queue was …\n"],["leader","Sidekiq::ProcessSet","Sidekiq/ProcessSet.html#method-i-leader","()","<p>Returns the identity of the current cluster leader or “” if no leader. This\nis a Sidekiq Enterprise …\n"],["lengths","Sidekiq::Stats::Queues","Sidekiq/Stats/Queues.html#method-i-lengths","()",""],["max_jobs","Sidekiq::DeadSet","Sidekiq/DeadSet.html#method-c-max_jobs","()",""],["new","Sidekiq::DeadSet","Sidekiq/DeadSet.html#method-c-new","()",""],["new","Sidekiq::JobRecord","Sidekiq/JobRecord.html#method-c-new","(item, queue_name = nil)",""],["new","Sidekiq::Process","Sidekiq/Process.html#method-c-new","(hash)",""],["new","Sidekiq::ProcessSet","Sidekiq/ProcessSet.html#method-c-new","(clean_plz = true)",""],["new","Sidekiq::Queue","Sidekiq/Queue.html#method-c-new","(name = \"default\")",""],["new","Sidekiq::RetrySet","Sidekiq/RetrySet.html#method-c-new","()",""],["new","Sidekiq::ScheduledSet","Sidekiq/ScheduledSet.html#method-c-new","()",""],["new","Sidekiq::SortedEntry","Sidekiq/SortedEntry.html#method-c-new","(parent, score, item)",""],["new","Sidekiq::SortedSet","Sidekiq/SortedSet.html#method-c-new","(name)",""],["new","Sidekiq::Stats","Sidekiq/Stats.html#method-c-new","()",""],["new","Sidekiq::Stats::History","Sidekiq/Stats/History.html#method-c-new","(days_previous, start_date = nil)",""],["parse","Sidekiq::JobRecord","Sidekiq/JobRecord.html#method-i-parse","(item)",""],["paused?","Sidekiq::Queue","Sidekiq/Queue.html#method-i-paused-3F","()","<p>Sidekiq Pro overrides this\n"],["processed","Sidekiq::Stats","Sidekiq/Stats.html#method-i-processed","()",""],["processed","Sidekiq::Stats::History","Sidekiq/Stats/History.html#method-i-processed","()",""],["processes_size","Sidekiq::Stats","Sidekiq/Stats.html#method-i-processes_size","()",""],["queues","Sidekiq::Process","Sidekiq/Process.html#method-i-queues","()",""],["queues","Sidekiq::Stats","Sidekiq/Stats.html#method-i-queues","()",""],["quiet!","Sidekiq::Process","Sidekiq/Process.html#method-i-quiet-21","()",""],["reschedule","Sidekiq::SortedEntry","Sidekiq/SortedEntry.html#method-i-reschedule","(at)",""],["reset","Sidekiq::Stats","Sidekiq/Stats.html#method-i-reset","(*stats)",""],["retry","Sidekiq::SortedEntry","Sidekiq/SortedEntry.html#method-i-retry","()",""],["retry_all","Sidekiq::DeadSet","Sidekiq/DeadSet.html#method-i-retry_all","()",""],["retry_all","Sidekiq::RetrySet","Sidekiq/RetrySet.html#method-i-retry_all","()",""],["retry_size","Sidekiq::Stats","Sidekiq/Stats.html#method-i-retry_size","()",""],["scan","Sidekiq::SortedSet","Sidekiq/SortedSet.html#method-i-scan","(match, count = 100)",""],["schedule","Sidekiq::JobSet","Sidekiq/JobSet.html#method-i-schedule","(timestamp, message)",""],["scheduled_size","Sidekiq::Stats","Sidekiq/Stats.html#method-i-scheduled_size","()",""],["size","Sidekiq::ProcessSet","Sidekiq/ProcessSet.html#method-i-size","()","<p>This method is not guaranteed accurate since it does not prune the set\nbased on current heartbeat.   …\n"],["size","Sidekiq::Queue","Sidekiq/Queue.html#method-i-size","()",""],["size","Sidekiq::SortedSet","Sidekiq/SortedSet.html#method-i-size","()",""],["size","Sidekiq::WorkSet","Sidekiq/WorkSet.html#method-i-size","()","<p>Note that #size is only as accurate as Sidekiq&#39;s heartbeat, which\nhappens every 5 seconds.  It is …\n"],["size","Sidekiq::WorkSet","Sidekiq/WorkSet.html#method-i-size","()","<p>Note that #size is only as accurate as Sidekiq&#39;s heartbeat, which\nhappens every 5 seconds.  It is …\n"],["stop!","Sidekiq::Process","Sidekiq/Process.html#method-i-stop-21","()",""],["stopping?","Sidekiq::Process","Sidekiq/Process.html#method-i-stopping-3F","()",""],["tag","Sidekiq::Process","Sidekiq/Process.html#method-i-tag","()",""],["tags","Sidekiq::JobRecord","Sidekiq/JobRecord.html#method-i-tags","()",""],["timeout","Sidekiq::DeadSet","Sidekiq/DeadSet.html#method-c-timeout","()",""],["total_concurrency","Sidekiq::ProcessSet","Sidekiq/ProcessSet.html#method-i-total_concurrency","()","<p>Total number of threads available to execute jobs. For Sidekiq Enterprise\ncustomers this number (in production) …\n"],["total_rss","Sidekiq::ProcessSet","Sidekiq/ProcessSet.html#method-i-total_rss","()",""],["total_rss_in_kb","Sidekiq::ProcessSet","Sidekiq/ProcessSet.html#method-i-total_rss_in_kb","()",""],["workers_size","Sidekiq::Stats","Sidekiq/Stats.html#method-i-workers_size","()",""],["💣","Sidekiq::Queue","Sidekiq/Queue.html#method-i-F0-9F-92-A3","()",""],["💣","Sidekiq::SortedSet","Sidekiq/SortedSet.html#method-i-F0-9F-92-A3","()",""]]}}